@import "include/variables";

$radar_size: 500px;
$small_radar_size: 250px;

.trainee-info {
  // Don't grey out inputs while logged out
  *:disabled {
    color: black !important;

    & + span {
      pointer-events: none;
    }

    // TODO: Make this same color as when logged in
    &:checked + span {
      &::before {
        background-color: #59c1b6 !important;
      }
    }

    // Get rid of adjustment arrows while disabled
    &::-webkit-outer-spin-button, &::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
    &[type=number] {
      -moz-appearance: textfield;
    }
  }
  .switch.disabled {
    pointer-events: none;
  }
  // Get rid of select dropdown arrow while disabled
  .select-wrapper.disabled svg {
    display: none;
  }

  // Spacing between multiple trainees in a list
  &:not(:first-child) {
    margin-top: 40px;
  }
  &:not(:last-child) {
    margin-bottom: 40px;
  }
  &:only-child {
    margin: 0;
  }

  .trainee-info-top {
    display: flex;
    justify-content: space-around;
    flex-wrap: wrap;
    gap: 50px;

    .sprite-and-types {
      position: absolute;
      top: -45px;
      left: -25px;
      z-index: 1;

      display: flex;
      align-items: center;

      .sprite {
        @media (min-width: #{$image-breakpoint}) {
          display: none;
        }
        @media (min-width: #{$radar-breakpoint}) and
               (max-width: #{$image-breakpoint}) {
          width: 75px;
        }
        @media (max-width: #{$radar-breakpoint}) {
          left: -10px;
        }
      }

      .trainee-types {
        width: 0;
      }
    }

    .corner-buttons {
      position: absolute;
      top: -50px;
      right: 0;
      z-index: 1;

      @media (max-width: #{$image-breakpoint}) {
        top: -35px;
      }
      @media (max-width: #{$radar-breakpoint}) {
        right: 15px;
      }

      i {
        font-size: 3rem;
        @media (max-width: #{$radar-breakpoint}) {
          font-size: 2rem;
        }
        color: grey;
      }
    }

    .species-info {
      @media (max-width: #{$image-breakpoint}) {
        width: 85%;
      }

      input {
        display: block;
        overflow: hidden;
      }

      .autocomplete-content img {
        max-width: 100%;
        height: auto;
      }

      .trainee-artwork {
        max-height: 100%;
        max-width: 100%;
        width: 475px;

        @media (max-width: #{$image-breakpoint}) {
          img {
            display: none;
          }
        }
        object-fit: contain;
      }

      .species {
        flex: 2;
      }
    }

    .side-by-side {
      display: flex;
      justify-content: space-between;
      gap: 1em;

      @media (max-width: #{$image-breakpoint}) {
        .input-field {
          margin-bottom: 0;
        }
      }

      @media (max-width: #{$radar-breakpoint}) {
        &.nickname-species {
          display: block;
          .input-field.nickname {
            margin: 0 0 20px 0;
          }
        }
      }

      >* {
        flex: 1;
      }
    }

    $point_offset: $radar_size / 2 + 25px;
    $small_offset: $point_offset / 2;

    .ev-info {
      position: relative;
      margin: 100px 0;
      @media (max-width: #{$image-breakpoint}) {
        margin-top: 25px;
      }
      @media (max-width: #{$radar-breakpoint}) {
        margin: 25px 0 65px 0;
      }

      width: $radar_size;
      height: $radar_size;
      @media (max-width: #{$radar-breakpoint}) {
        width: $small_radar_size;
        height: $small_radar_size;
      }

      .pokerus {
        margin-top: $radar_size;
        @media (max-width: #{$radar-breakpoint}) {
          margin-top: $small_radar_size;
          position: absolute;
          left: -30px;
        }
      }

      .radar-chart {
        position: absolute;
        width: $radar_size;
        height: $radar_size;
        @media (max-width: #{$radar-breakpoint}) {
          width: $small_radar_size;
          height: $small_radar_size;
        }
        margin: auto;
      }

      .point {
        width: 3em;
        position: absolute;
        left: 50%;
        top: 50%;
        // Correct enigmatic diagonal misalignment
        margin: -2.5em 0 0 -1.95em;
        @media (max-width: #{$radar-breakpoint}) {
          margin: -2em 0 0 -1.85em;
        }

        text-align: center;

        &.def {
          transform: rotate(30deg) translate($point_offset) rotate(-30deg);
          @media (max-width: #{$radar-breakpoint}) {
            transform: rotate(30deg) translate($small_offset) rotate(-30deg);
          }

          &::after{
            content: "Def"
          }
        }

        &.spe {
          transform: rotate(90deg) translate($point_offset) rotate(-90deg);
          @media (max-width: #{$radar-breakpoint}) {
            transform: rotate(90deg) translate($small_offset) rotate(-90deg);
          }

          &::after{
            content: "Spe"
          }
        }

        &.spd {
          transform: rotate(150deg) translate($point_offset) rotate(-150deg);
          @media (max-width: #{$radar-breakpoint}) {
            transform: rotate(150deg) translate($small_offset) rotate(-150deg);
          }

          &::after{
            content: "Sp.D"
          }
        }

        &.spa {
          transform: rotate(210deg) translate($point_offset) rotate(-210deg);
          @media (max-width: #{$radar-breakpoint}) {
            transform: rotate(210deg) translate($small_offset) rotate(-210deg);
          }

          &::before{
            content: "Sp.A"
          }
        }

        &.hp {
          transform: rotate(270deg) translate($point_offset) rotate(-270deg);
          @media (max-width: #{$radar-breakpoint}) {
            transform: rotate(270deg) translate($small_offset) rotate(-270deg);
          }

          &::before{
            content: "HP"
          }
        }

        &.atk {
          transform: rotate(330deg) translate($point_offset) rotate(-330deg);
          @media (max-width: #{$radar-breakpoint}) {
            transform: rotate(330deg) translate($small_offset) rotate(-330deg);
          }

          &::before{
            content: "Atk"
          }
        }

        input.ev-input {
          border: 2px solid black;
          font-size: 12pt;
          text-align: center;
          margin: 0;

          @media (max-width: #{$radar-breakpoint}) {
            width: 2rem;
            height: 2rem;
          }

          // Make it look like it forces a 0 into an empty box
          // (actually just a black placeholder
          //  that disappears on focus)
          &::placeholder {
            color: black;
            opacity: 1;
          }
          &:-ms-input-placeholder { color: black; }
          &::-ms-input-placeholder { color: black; }
          &:focus {
            border: 2px solid green;
            &::placeholder {
              color: transparent;
            }
          }

          &:invalid {
            border: 2px solid red;
          }

          // No arrows
          -moz-appearance: textfield;
          &::-webkit-outer-spin-button,
          &::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
          }
        }
      }
    }
  }

  .items-menu {
    margin-top: 0;

    .collapsible-header {
      display: flex;
      justify-content: space-between;

      // Stop clicking the background from expanding the collapsible
      pointer-events: none;
      // Turn pointer events back on for the radio buttons
      // (if logged in), and the expand button
      input:not([disabled]) + span, i.expand { pointer-events: auto; }

      .held-items {
        flex-grow: 1;

        display: flex;
        justify-content: space-between;
        gap: 0.5rem;
        flex-wrap: wrap;

        // Flowing grid as page width gets smaller
        @media (max-width: #{$items-lg-breakpoint}) {
          display: grid;
          grid-template-columns: repeat(4, 1fr);
        }
        @media (max-width: #{$items-med-breakpoint}) {
          grid-template-columns: repeat(2, 1fr);
        }

        span {
          display: flex;
          align-items: center;
          padding: 0 0 0.25rem 1.8rem;
          color: #545454;
          line-height: 1rem;

          img {
            margin-right: 0.25rem;
            width: 32px;
            height: 32px;
          }

          // Wrap text simultaneously, min-width stops "No Item" from wrapping
          @media (min-width: 427px) and
                 (max-width: #{$items-text-wrap-breakpoint}) {
            width: 60%;
          }
        }
      }

      i.expand {
        margin: 0 0 0 1rem;
      }
    }

    .consumables.row {
      padding: 0.5rem 0;

      .col {
        padding-bottom: 0.5rem;

        &.middle {
          $dividers: 1px solid grey;
          border-left: $dividers;
          border-right: $dividers;
        }
      }

      h5 {
        margin-top: 0;
        text-align: center;
      }
    }
  }

}

#kill-search {
  margin-top: 20px;
}
